{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{% set overlay_color = content.field_overlay_color[0]['#markup']|replace({'#': ''}) %}
{% set media_position = content.field_media_position[0]['#markup'] %}
{% set theme_color = content.field_theme_color[0]['#markup'] %}
{% set image_url = file_url(content.field_media[0]['#media'].field_media_image.entity.uri.value|image_style('header_banner')) %}
{% set image_title = content.field_media[0]['#media'].field_media_image[0].title %}
{% set image_alt = content.field_media[0]['#media'].field_media_image[0].alt %}

{# Allowed colours: #fdc702,#003C6C,#006aad,#007988,#546d1a,#13a5db,#f29813. #}
{% if overlay_color == 'fdc702' %}
  {% set overlay_color = 'yellow' %}
{% elseif overlay_color == '003C6C' %}
  {% set overlay_color = 'blue' %}
{% elseif overlay_color == '006aad' %}
  {% set overlay_color = 'secondary-blue' %}
{% elseif overlay_color == '007988' %}
  {% set overlay_color = 'seagreen' %}
{% elseif overlay_color == '546d1a' %}
  {% set overlay_color = 'green' %}
{% elseif overlay_color == '13a5db' %}
  {% set overlay_color = 'turquiose' %}
{% elseif overlay_color == 'f29813' %}
  {% set overlay_color = 'orange' %}
{% else %}
  {% set overlay_color = 'unknow' %}
{% endif %}

{# In template we should use text position. #}
{% if media_position == 'Media on the Left' %}
  {% set text_position = 'right' %}
{% elseif media_position == 'Media on the Right' %}
  {% set text_position = 'left' %}
{% else %}
  {% set text_position = 'unknow' %}
{% endif %}

{% if theme_color == 'Basic' %}
  {% set theme_color = 'basic' %}
{% elseif theme_color == 'Alternative' %}
  {% set theme_color = 'alternative' %}
{% else %}
  {% set theme_color = 'unknow' %}
{% endif %}

{% set classes = [
  'paragraph',
  'paragraph--type--' ~ paragraph.bundle|clean_id,
  'paragraph--id--' ~ paragraph.id()|clean_id,
  view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_id,
  not paragraph.isPublished() ? 'paragraph--unpublished',
  'hero-viewport',
  overlay_color
] %}

{% block paragraph %}
  <section{{ attributes.addClass(classes).addClass() }} aria-label="content row id-{{ paragraph.id() }}">
    {% block content %}
      <div class="hero-container">
        <div id="hero" class="hero hero-text-{{ text_position }}">
          <div class="gradient-overlay"></div>
          <img src="{{ image_url }}" title="{{ image_title }} alt={{ image_alt }}"/>
          <a href="{{ content.field_link[0]['#url'] }}" class="hero-link"
             target="{{ content.field_link[0]['#url'].isExternal() ? '_blank' : '' }}">
            <div class="angle transparent wow"></div>
            <div class="hero-text">
              <div class="category">{{ content.field_head_title }}</div>
              <h1
                class="hero-header{% if theme_color == 'basic' %} yellow-text{% endif %}">{{ content.field_title }}</h1>
              <p class="hero-body">{{ content.field_caption[0]['#context'].value }}</p>
              <h4 class="subhead"><a href="{{ content.field_link_2[0]['#url'] }}"
                                     class="yellow-text">{{ content.field_link_2[0]['#title'] }}</a></h4>
            </div>
          </a>
        </div>
      </div>
    {% endblock %}
  </section>
{% endblock paragraph %}
